#MCP GraphQL Server - Configurador de Auto-Inicializa√ß√£o
#este script configura o servidor para iniciar automaticamente com o VS Code

param(
    [ValidateSet("install", "uninstall", "status")]
    [string]$Action = "install",
    [string]$ServerPath = "$env:APPDATA\MCPGraphQLServer"
)

$ServiceName = "MCPGraphQLAutoStart"
$TaskName = "MCP GraphQL Server Auto Start"

function Install-AutoStart{
    Write-Host "‚öôÔ∏è Configurando auto-inicializa√ß√£o do MCP Server..." -ForegroundColor Cyan
    
    #m√©todo 1: Task Scheduler (Recomendado)
    Write-Host "üìÖ Configurando Task Scheduler..." -ForegroundColor Yellow
    
    $taskAction = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-WindowStyle Hidden -ExecutionPolicy Bypass -File `"$ServerPath\auto-start-monitor.ps1`""
    $taskTrigger = New-ScheduledTaskTrigger -AtLogOn
    $taskSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
    $taskPrincipal = New-ScheduledTaskPrincipal -UserId "$env:USERDOMAIN\$env:USERNAME" -LogonType Interactive
    
    try{
        Register-ScheduledTask -TaskName $TaskName -Action $taskAction -Trigger $taskTrigger -Settings $taskSettings -Principal $taskPrincipal -Force
        Write-Host "‚úÖ Task Scheduler configurado com sucesso!" -ForegroundColor Green
    }catch{
        Write-Host "‚ùå Erro ao configurar Task Scheduler: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    #m√©todo 2: Registro do Windows (Backup)
    Write-Host "üìù Configurando registro do Windows..." -ForegroundColor Yellow
    
    try{
        $regPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
        $regValue = "PowerShell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -File `"$ServerPath\auto-start-monitor.ps1`""
        Set-ItemProperty -Path $regPath -Name $ServiceName -Value $regValue -Force
        Write-Host "‚úÖ Registro do Windows configurado!" -ForegroundColor Green
    }catch{
        Write-Host "‚ùå Erro ao configurar registro: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    #criar script de desinstala√ß√£o
    $uninstallScript = @"
# MCP GraphQL Server - Desinstalador
Write-Host "üóëÔ∏è Removendo auto-inicializa√ß√£o do MCP Server..." -ForegroundColor Yellow

# Remover Task Scheduler
try {
    Unregister-ScheduledTask -TaskName "$TaskName" -Confirm:`$false -ErrorAction Stop
    Write-Host "‚úÖ Task Scheduler removido!" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Task Scheduler n√£o encontrado ou j√° removido" -ForegroundColor Yellow
}

# Remover do registro
try {
    Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run" -Name "$ServiceName" -ErrorAction Stop
    Write-Host "‚úÖ Entrada do registro removida!" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Entrada do registro n√£o encontrada" -ForegroundColor Yellow
}

Write-Host "üéâ Auto-inicializa√ß√£o removida com sucesso!" -ForegroundColor Green
"@
    
    $uninstallScript | Out-File -FilePath "$ServerPath\uninstall-autostart.ps1" -Encoding UTF8
    
    Write-Host ""
    Write-Host "üéâ AUTO-INICIALIZA√á√ÉO CONFIGURADA!" -ForegroundColor Green
    Write-Host "=" * 50 -ForegroundColor Gray
    Write-Host "‚úÖ O MCP Server agora iniciar√° automaticamente quando:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Voc√™ fizer login no Windows" -ForegroundColor White
    Write-Host "   ‚Ä¢ Abrir o VS Code" -ForegroundColor White
    Write-Host ""
    Write-Host "üîß Para desinstalar: $ServerPath\uninstall-autostart.ps1" -ForegroundColor Yellow
}

function Uninstall-AutoStart{
    Write-Host "üóëÔ∏è Removendo auto-inicializa√ß√£o..." -ForegroundColor Yellow
    
    #remover Task Scheduler
    try{
        Unregister-ScheduledTask -TaskName $TaskName -Confirm:$false -ErrorAction Stop
        Write-Host "‚úÖ Task Scheduler removido!" -ForegroundColor Green
    }catch{
        Write-Host "‚ö†Ô∏è Task Scheduler n√£o encontrado" -ForegroundColor Yellow
    }
    
    #remover do registro
    try{
        Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run" -Name $ServiceName -ErrorAction Stop
        Write-Host "‚úÖ Entrada do registro removida!" -ForegroundColor Green
    }catch{
        Write-Host "‚ö†Ô∏è Entrada do registro n√£o encontrada" -ForegroundColor Yellow
    }
    
    #parar processo se estiver rodando
    $monitorProcess = Get-Process -Name "powershell" -ErrorAction SilentlyContinue | Where-Object {
        $_.CommandLine -like "*auto-start-monitor.ps1*"
    }
    
    if($monitorProcess){
        $monitorProcess | Stop-Process -Force
        Write-Host "‚úÖ Monitor parado!" -ForegroundColor Green
    }
    
    Write-Host "üéâ Auto-inicializa√ß√£o removida com sucesso!" -ForegroundColor Green
}

function Get-AutoStartStatus{
    Write-Host "üìä STATUS DA AUTO-INICIALIZA√á√ÉO" -ForegroundColor Cyan
    Write-Host "=" * 40 -ForegroundColor Gray
    
    #verificar Task Scheduler
    try{
        $task = Get-ScheduledTask -TaskName $TaskName -ErrorAction Stop
        Write-Host "‚úÖ Task Scheduler: ATIVO" -ForegroundColor Green
        Write-Host "   Estado: $($task.State)" -ForegroundColor White
    }catch{
        Write-Host "‚ùå Task Scheduler: INATIVO" -ForegroundColor Red
    }
    
    #verificar registro
    try{
        $regValue = Get-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run" -Name $ServiceName -ErrorAction Stop
        Write-Host "‚úÖ Registro Windows: ATIVO" -ForegroundColor Green
    }catch{
        Write-Host "‚ùå Registro Windows: INATIVO" -ForegroundColor Red
    }
    
    #verificar se o monitor est√° rodando
    $monitorProcess = Get-Process -Name "powershell" -ErrorAction SilentlyContinue | Where-Object {
        $_.CommandLine -like "*auto-start-monitor.ps1*"
    }
    
    if($monitorProcess){
        Write-Host "‚úÖ Monitor: RODANDO (PID: $($monitorProcess.Id))" -ForegroundColor Green
    }else{
        Write-Host "‚ùå Monitor: PARADO" -ForegroundColor Red
    }
    
    #verificar servidor MCP
    try{
        $response = Invoke-WebRequest -Uri "http://localhost:3001/mcp/health" -TimeoutSec 2 -ErrorAction Stop
        Write-Host "‚úÖ MCP Server: RODANDO" -ForegroundColor Green
    }catch{
        Write-Host "‚ùå MCP Server: PARADO" -ForegroundColor Red
    }
}

#executar a√ß√£o solicitada
switch ($Action){
    "install" { Install-AutoStart }
    "uninstall" { Uninstall-AutoStart }
    "status" { Get-AutoStartStatus }
}